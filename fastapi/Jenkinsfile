pipeline {
    environment {
        BRANCH = "${env.GIT_BRANCH}"
        registryCredential = 'DOCKER-HUB-ACCESS'
        imageFastAPI = "krishangopal/$JOB_NAME-fastapi"

	SCANNER_HOME = tool 'SonarQubeScanner'
	ORGANIZATION = "KrishanGopalWipro"
	PROJECT_NAME = "Python-FastAPI-Demo"

    }

    agent any

    stages {

	stage('Unit Tests') {
	   agent { docker { image 'python:3.7.2' } }
	   steps {
              script { 
	         sh 'python fastapideta/test_main.py'
              }
	   }
        }

	stage('SonarQube analysis') {
	   steps {
              withSonarQubeEnv('SonarQube') { // If you have configured more than one global server connection, you can specify its name
                 sh '''$SCANNER_HOME/bin/sonar-scanner \
	           -Dsonar.organization=$ORGANIZATION \
                   -Dsonar.projectKey=$PROJECT_NAME \
                   -Dsonar.sources=.'''
              }
	   }
        }

        stage('build') {
            steps {
	       script {
                  image = docker.build( imageFastAPI + ":$BUILD_NUMBER", '-f fastapi/Dockerfile .')
	       }
            }
        }

	stage('push') {
            steps {
	       script {
                   docker.withRegistry( '', registryCredential ) {
		      image.push('latest')
                   }
	       }
            }
        }

	stage('run') {
            steps {
	       script {
	          sh "docker ps -f name=$JOB_NAME-fastapi -q | xargs --no-run-if-empty docker container stop"
		  sh "docker container ls -a -fname=$JOB_NAME-fastapi -q | xargs --no-run-if-empty docker container rm"

                  docker.image(imageFastAPI).run("--name $JOB_NAME-fastapi -p 8002:80")
	       }
            }
        }
    }

}